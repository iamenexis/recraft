import customtkinter
import tkinter as tk
import os
from PIL import Image
from PIL import ImageTk

import keyboard
import threading
from win10toast import ToastNotifier
import time
import datetime
import logging

import minecraft_launcher_lib
from minecraft_launcher_lib.utils import get_minecraft_directory, get_version_list
from minecraft_launcher_lib.forge import find_forge_version
from minecraft_launcher_lib.install import install_minecraft_version
from minecraft_launcher_lib.command import get_minecraft_command
from random_username.generate import generate_username

from uuid import uuid1
from subprocess import call
import subprocess
import sys
import io
from io import StringIO
import pystray
import json
import random
import string


#minecraft_directory = get_minecraft_directory().replace('minecraft', 'cultismMC')
minecraft_directory = minecraft_launcher_lib.utils.get_minecraft_directory()

customtkinter.set_default_color_theme("assets/green.json")

version = 'ex0.1'

class recraftMC(customtkinter.CTk):
    def __init__(self):
        super().__init__()

        #customtkinter.set_default_color_theme("green")
        self.title("re:Craft Launcher: Experimental editionüß™")
        self.geometry("920x585")
        #self.minsize(920, 585)
        #self.maxsize(920, 585)
        self.resizable(False, False)

        self.install_thread = None
        self.progress_max = 0
        self.installing = False  # —Ñ–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∏–¥–µ—Ç –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞
        self.install_thread_id = None

        self.progress_bar_visible = False

        self.toaster = ToastNotifier()

        # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        self.userdata_folder = os.path.join(os.getenv('APPDATA'), 'reCraftUserdata')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(self.userdata_folder):
            os.makedirs(self.userdata_folder)

        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        self.settings_file_path = os.path.join(self.userdata_folder, 'settings.json')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(self.settings_file_path):
            self.create_settings_file()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞
        self.load_settings()

        console = customtkinter.CTkFont(family="Consolas", size=18, weight="normal")    

        self.greetings = ["–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ re:Craft!",
                          "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ re:Craft!",
                          "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ re:Craft!"
                          ]

        #–¥–∞–µ–º –∏–∫–æ–Ω–∫—É
        self.iconpath = ImageTk.PhotoImage(file=os.path.join("assets","logo.png"))
        self.wm_iconbitmap()
        self.iconphoto(False, self.iconpath)

        # set grid layout 1x2
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(1, weight=1)

        keyboard.add_hotkey('alt+6', self.open_new_window_in_about_frame)
        self.current_frame = None

        # load images with light and dark mode image
        image_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "assets")
        self.logo_image = customtkinter.CTkImage(Image.open(os.path.join(image_path, "title.png")), size=(150, 35))
        self.icon = customtkinter.CTkImage(Image.open(os.path.join(image_path, "logo.png")), size=(60, 60))
        self.large_title_image = customtkinter.CTkImage(Image.open(os.path.join(image_path, "title.png")), size=(400, 90))
        self.image_icon_image = customtkinter.CTkImage(Image.open(os.path.join(image_path, "image_icon_light.png")), size=(20, 20))
        self.home_image = customtkinter.CTkImage(light_image=Image.open(os.path.join(image_path, "home_dark.png")),
                                                 dark_image=Image.open(os.path.join(image_path, "home_light.png")), size=(20, 20))
        self.settings_image = customtkinter.CTkImage(light_image=Image.open(os.path.join(image_path, "settings_dark.png")),
                                                    dark_image=Image.open(os.path.join(image_path, "settings_light.png")), size=(20, 20))
        self.about_image = customtkinter.CTkImage(light_image=Image.open(os.path.join(image_path, "about_dark.png")),
                                                  dark_image=Image.open(os.path.join(image_path, "about_light.png")), size=(20, 20))
        self.cmd_image = customtkinter.CTkImage(light_image=Image.open(os.path.join(image_path, "Terminal_dark.png")),
                                                  dark_image=Image.open(os.path.join(image_path, "terminal_light.png")), size=(20, 20))

        # –ø–∞–Ω–µ–ª—å —Å–±–æ–∫—É
        self.navigation_frame = customtkinter.CTkFrame(self, corner_radius=0)
        self.navigation_frame.grid(row=0, column=0, sticky="nsew")
        self.navigation_frame.grid_rowconfigure(5, weight=1)

        self.navigation_frame_label = customtkinter.CTkLabel(self.navigation_frame, text="", image=self.icon,
                                                             compound="left", font=customtkinter.CTkFont(size=15, weight="bold"))
        self.navigation_frame_label.grid(row=0, column=0, padx=20, pady=20)

        self.home_button = customtkinter.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="–ì–ª–∞–≤–Ω–∞—è",
                                                   fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                                   image=self.home_image, anchor="w", command=self.home_button_event)
        self.home_button.grid(row=1, column=0, sticky="ew")

        self.settings_button = customtkinter.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                                                       fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                                       image=self.settings_image, anchor="w", command=self.settings_button_event)
        self.settings_button.grid(row=2, column=0, sticky="ew")

        self.cmd_button = customtkinter.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="–¢–µ—Ä–º–∏–Ω–∞–ª",
                                                       fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                                       image=self.cmd_image, anchor="w", command=self.cmd_button_event)
        self.cmd_button.grid(row=3, column=0, sticky="ew")

        self.about_button = customtkinter.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="–û –ª–∞—É–Ω—á–µ—Ä–µ",
                                                    fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                                    image=self.about_image, anchor="w", command=self.about_button_event)
        self.about_button.grid(row=4, column=0, sticky="ew")

        #–Ω–∏–∫ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.nick_entry = customtkinter.CTkEntry(self.navigation_frame, placeholder_text="–ù–∏–∫–Ω–µ–π–º")
        self.nick_entry.grid(row=6, column=0, padx=20, pady=5, sticky="nsew")

        #–ª–∏—Å—Ç –≤–µ—Ä—Å–∏–π
        all_versions = self.get_all_versions()
        self.version_optionmenu = customtkinter.CTkComboBox(self.navigation_frame, values=all_versions)
        self.version_optionmenu.grid(row=7, column=0, padx=20, pady=1, sticky="nsew")

        #—Ç–µ–∫—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–µ—Ä—Å–∏–∏
        self.version_label = customtkinter.CTkLabel(self.navigation_frame, text="", anchor="w")
        self.version_label.grid(row=8, column=0, padx=20, pady=(5, 0), sticky="w")

        #–ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_bar = customtkinter.CTkProgressBar(self.navigation_frame)
        self.progress_bar.configure(mode="indeterminnate")
        self.progress_bar.grid(row=9, column=0, padx=20, pady=5, sticky="nsew")
        
        #–∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏ –∫–Ω–æ–ø–∫–∞ –ø–∞–ø–∫–∏ –∏–≥—Ä—ã
        self.start_button = customtkinter.CTkButton(self.navigation_frame, text="–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã", command=self.launch_game)
        self.start_button.grid(row=10, column=0, padx=20, pady=5, sticky="nsew")

        self.open_folder_button = customtkinter.CTkButton(self.navigation_frame, text="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –∏–≥—Ä—ã", command=self.open_minecraft_folder)
        self.open_folder_button.grid(row=11, column=0, padx=20, pady=5, sticky="nsew")

        #–¥–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        self.home_frame = customtkinter.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.home_frame.grid_columnconfigure(0, weight=1)

        self.home_frame_large_image_label = customtkinter.CTkLabel(self.home_frame, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ re:Craft!", 
                                                                   compound="left", font=customtkinter.CTkFont(size=30, weight="bold"))
        self.home_frame_large_image_label.grid(row=0, column=0, padx=20, pady=10)
        
        #–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –º–µ–Ω—è–µ—Ç—Å—è
        #self.home_frame_label = customtkinter.CTkLabel(self.home_frame, text="", font=customtkinter.CTkFont(size=20, weight="bold"))
        #self.home_frame_label.grid(row=1, column=0, padx=20, pady=(10, 20))

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        #self.update_greeting()

        #–Ω–æ–≤–æ—Å—Ç–∏, —á–∞–Ω–¥–∂–ª–æ–≥
        self.changelog = customtkinter.CTkLabel(self.home_frame, text="–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–µ—Ä—Å–∏–∏ ex0.1:",
                                                 compound="left", font=customtkinter.CTkFont(size=20, weight="normal"))
        self.changelog.grid(row=2, column=0, sticky="s", padx=20, pady=(0, 20))

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–º–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.frame = customtkinter.CTkScrollableFrame(self.home_frame, width=550, height=200)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ä–∞–º–∫–∏
        self.frame.grid(row=3, column=0, sticky="s")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º grid –≤–º–µ—Å—Ç–æ pack

        self.changelog = customtkinter.CTkLabel(self.frame, text="–ø—Ä–∏–≤–µ—Ç, —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—Å—è –≤ —ç–∫—Å–ø–µ—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –≤–µ—Ç–∫–µ, –º–∞–ª—ã—àüß™ \n –ø—Ä–æ—á–∏—Ç–∞–π –ø—Ä–æ –≤–µ—Ç–∫—É –Ω–∞ –≥–∏—Ç—Ö–∞–±–µ")
        self.changelog.grid(row=4, column=0, sticky="s", padx=20)


        #–≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: —à–µ–¥–µ–≤—Ä–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.settings_frame = customtkinter.CTkFrame(self, corner_radius=0, fg_color="transparent")

        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
        self.launch_settings_frame = customtkinter.CTkFrame(self.settings_frame, corner_radius=10, fg_color="gray20")
        self.launch_settings_frame.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

        self.title = customtkinter.CTkLabel(self.launch_settings_frame, text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã', fg_color="gray30", corner_radius=6)
        self.title.grid(row=0, column=0, padx=10, pady=(10, 10), sticky="ew")

        self.jvm_arguments_entry = customtkinter.CTkEntry(self.launch_settings_frame, placeholder_text="JVM –ê—Ä–≥—É–º–µ–Ω—Ç—ã")
        self.jvm_arguments_entry.grid(row=1, column=0, padx=20, pady=5, sticky="nsew")

        self.executable_path_entry = customtkinter.CTkEntry(self.launch_settings_frame, placeholder_text="–ü—É—Ç—å –∫ Java Executable")
        self.executable_path_entry.grid(row=2, column=0, padx=20, pady=5, sticky="nsew")

        self.default_executable_path_entry = customtkinter.CTkEntry(self.launch_settings_frame, placeholder_text="–ü—É—Ç—å –∫ Java Executable –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        self.default_executable_path_entry.grid(row=3, column=0, padx=20, pady=5, sticky="nsew")

        self.custom_resolution_checkbox = customtkinter.CTkCheckBox(self.launch_settings_frame, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ")
        self.custom_resolution_checkbox.grid(row=4, column=0, padx=20, pady=5, sticky="w")

        self.resolution_width_entry = customtkinter.CTkEntry(self.launch_settings_frame, placeholder_text="–®–∏—Ä–∏–Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
        self.resolution_width_entry.grid(row=5, column=0, padx=20, pady=5, sticky="nsew")

        self.resolution_height_entry = customtkinter.CTkEntry(self.launch_settings_frame, placeholder_text="–í—ã—Å–æ—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
        self.resolution_height_entry.grid(row=6, column=0, padx=20, pady=5, sticky="nsew")

        self.game_directory_entry = customtkinter.CTkEntry(self.launch_settings_frame, placeholder_text="–ö–∞—Ç–∞–ª–æ–≥ –∏–≥—Ä—ã")
        self.game_directory_entry.grid(row=7, column=0, padx=20, pady=5, sticky="nsew")

        self.demo_mode_checkbox = customtkinter.CTkCheckBox(self.launch_settings_frame, text="–î–µ–º–æ-—Ä–µ–∂–∏–º")
        self.demo_mode_checkbox.grid(row=8, column=0, padx=20, pady=5, sticky="w")



        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.interface_settings_frame = customtkinter.CTkFrame(self.settings_frame, corner_radius=10, fg_color="gray20")
        self.interface_settings_frame.grid(row=0, column=1, padx=10, pady=10, sticky="nsew")

        self.title = customtkinter.CTkLabel(self.interface_settings_frame, text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞', fg_color="gray30", corner_radius=6)
        self.title.grid(row=0, column=0, padx=10, pady=(10, 0), sticky="ew")


        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
        self.scaling_label = customtkinter.CTkLabel(self.interface_settings_frame, text="–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ:", anchor="w")
        self.scaling_label.grid(row=1, column=0, padx=20, pady=(10, 0))
        self.scaling_optionmenu = customtkinter.CTkOptionMenu(self.interface_settings_frame, values=["100%", "90%", "110%", "120%"],
                                                               command=self.change_scaling_event)
        self.scaling_optionmenu.grid(row=2, column=0, padx=20, pady=20, sticky="s")

        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
        self.theme_label = customtkinter.CTkLabel(self.interface_settings_frame, text="–¢–µ–º–∞:", anchor="w")
        self.theme_label.grid(row=3, column=0, padx=20, pady=(10, 0))
        self.theme_optionmenu = customtkinter.CTkOptionMenu(self.interface_settings_frame, values=["Light", "Dark", "System"],
                                                               command=self.change_appearance_mode_event)
        self.theme_optionmenu.grid(row=4, column=0, padx=20, pady=20, sticky="s")

        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
        self.greeting_switch_var = customtkinter.StringVar(value="off")

        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ –∫ –º–µ—Ç–æ–¥—É toggle_greeting
        self.greeting_switch = customtkinter.CTkSwitch(self.interface_settings_frame, text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏",
                                                       variable=self.greeting_switch_var, onvalue="on", offvalue="off",
                                                       command=self.toggle_greeting)
        self.greeting_switch.grid(row=5, column=0, padx=20, pady=5, sticky="w")
        self.greeting_switch.configure(state="disabled")

        #–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
        self.random_greeting_switch_var = customtkinter.StringVar(value="on")

        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ –∫ –º–µ—Ç–æ–¥—É randomgreeting
        self.random_greeting_switch = customtkinter.CTkSwitch(self.interface_settings_frame, text="–°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
                                                       variable=self.random_greeting_switch_var, onvalue="on", offvalue="off",
                                                       command=self.update_randomgreeting)
        self.random_greeting_switch.grid(row=6, column=0, padx=20, pady=5, sticky="w")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.update_randomgreeting()
        '''
        #–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã

        self.jvm_arguments_entry = customtkinter.CTkEntry(self.settings_frame, placeholder_text="JVM –ê—Ä–≥—É–º–µ–Ω—Ç—ã")
        self.jvm_arguments_entry.grid(row=9, column=0, padx=20, pady=5, sticky="nsew")

        self.executable_path_entry = customtkinter.CTkEntry(self.settings_frame, placeholder_text="–ü—É—Ç—å –∫ Java Executable")
        self.executable_path_entry.grid(row=11, column=0, padx=20, pady=5, sticky="nsew")

        self.default_executable_path_entry = customtkinter.CTkEntry(self.settings_frame, placeholder_text="–ü—É—Ç—å –∫ Java Executable –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        self.default_executable_path_entry.grid(row=12, column=0, padx=20, pady=5, sticky="nsew")

        self.custom_resolution_checkbox = customtkinter.CTkCheckBox(self.settings_frame, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ")
        self.custom_resolution_checkbox.grid(row=8, column=2, padx=20, pady=5, sticky="w")

        self.resolution_width_entry = customtkinter.CTkEntry(self.settings_frame, placeholder_text="–®–∏—Ä–∏–Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
        self.resolution_width_entry.grid(row=9, column=2, padx=20, pady=5, sticky="nsew")

        self.resolution_height_entry = customtkinter.CTkEntry(self.settings_frame, placeholder_text="–í—ã—Å–æ—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
        self.resolution_height_entry.grid(row=10, column=2, padx=20, pady=5, sticky="nsew")

        self.game_directory_entry = customtkinter.CTkEntry(self.settings_frame, placeholder_text="–ö–∞—Ç–∞–ª–æ–≥ –∏–≥—Ä—ã")
        self.game_directory_entry.grid(row=12, column=2, padx=20, pady=5, sticky="nsew")

        self.demo_mode_checkbox = customtkinter.CTkCheckBox(self.settings_frame, text="–î–µ–º–æ-—Ä–µ–∂–∏–º")
        self.demo_mode_checkbox.grid(row=13, column=2, padx=20, pady=5, sticky="w")'''

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        self.save_settings_button = customtkinter.CTkButton(self.settings_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.save_settings_button.grid(row=15, column=0, padx=20, pady=10, sticky="nsew")

        #—Ç—Ä–µ—Ç—å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: —Ç–µ—Ä–º–∏–Ω–∞–ª
        self.cmd_frame = customtkinter.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.cmd_frame.grid_rowconfigure(0, weight=1)
        self.cmd_frame.grid_columnconfigure(0, weight=1)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –¥–ª—è –≤—ã–≤–æ–¥–∞
        self.output_text = customtkinter.CTkTextbox(self.cmd_frame, wrap="word", text_color="#05ff00", font=console)
        self.output_text.pack(fill="both", expand=True)

        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        sys.stdout = self.TextRedirector(self.output_text, "stdout")
        sys.stderr = self.TextRedirector(self.output_text, "stderr")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
        self.logger = logging.getLogger("minecraft_logger")
        self.logger.setLevel(logging.INFO)

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        log_stream = StringIO()
        log_handler = logging.StreamHandler(log_stream)
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        log_handler.setFormatter(formatter)
        self.logger.addHandler(log_handler)

        # –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –∏–∑ –±—É—Ñ–µ—Ä–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        self.after(100, self.update_terminal, log_stream)

        #—á–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: –æ –ª–∞—É–Ω—á–µ—Ä–µ
        self.about_frame = customtkinter.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.about_frame.grid_rowconfigure(0, weight=1)
        self.about_frame.grid_columnconfigure(0, weight=1)

        #–ª–æ–≥–æ—Ç–∏–ø –ª–∞—É–Ω—á–µ—Ä–∞
        self.about_frame_image_label = customtkinter.CTkLabel(self.about_frame, text="", image=self.large_title_image)
        self.about_frame_image_label.grid(row=0, column=0, padx=20, pady=10)

        #–≥–∏–≥–∞—Ç–µ–∫—Å—Ç
        self.editable_text_label = customtkinter.CTkLabel(self.about_frame, text="re:Craft Launcher - –ª–∞—É–Ω—á–µ—Ä –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç –Ω–∞–ø–∏—Å–∞–Ω—ã–π –Ω–∞ Python 3 \n —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CustomTkinter –∏ Minecraft Launcher Lib. \n –•–∑ –∞ –∑–∞—á–µ–º —è —ç—Ç–æ –ø–∏—à—É –≤–∞—â–µ, –∫–æ—Ä–æ—á–µ –ª–∞—É–Ω—á–µ—Ä —Å–æ–∑–¥–∞–Ω enexis'–æ–º")
        self.editable_text_label.grid(row=1, column=0, sticky="s", padx=20, pady=(0, 200))

        #—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –∫–∞–∂–¥–æ–º—É –ª–∞—É–Ω—á–µ—Ä—É
        self.code = customtkinter.CTkLabel(self.about_frame, text="ID: —Å—Ç—Ä–∞–Ω–Ω–æ, —É –≤–∞—Å –Ω–µ—Ç id...")
        self.code.grid(row=2, column=0, sticky="s", padx=20, pady=(0, 0))

        #–≤–µ—Ä—Å–∏—è, –ø—Ä–∞–≤–∞ —Ç–µ–∫—Å—Ç
        #self.editable_text_label = customtkinter.CTkLabel(self.about_frame, text="cultism GUI - 5.0, cultism launch - 2.6")
        #self.editable_text_label.grid(row=2, column=0, sticky="s", padx=20, pady=(0, 100))

        #–≤—ã–±–æ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –≤ –º–æ–µ–º —Å–ª—É—á–∞–µ –¥–æ–º–∞—à–Ω—è—è
        self.select_frame_by_name("home")

        self.install_thread = None

        self.progress_max = 0  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞


    #—à—ç–¥—ç–≤—Ä–æ –ø–∞—Å—Ö–∞–ª–∫–∞
    def about_button_event(self):
        self.select_frame_by_name("about")

    #—Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–æ–≤–æ–≥–æ
    def open_new_window(self):
        new_window = customtkinter.CTk()
        new_window.title("C. U. L. T. I. S. M.")
        new_window.geometry("780x350")

        label = customtkinter.CTkLabel(new_window, text="‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ïó\n‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ïë\n‚ñà‚ñà‚ïë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë\n‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ïö‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë\n‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñà‚ñà‚ïë\n‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù",text_color = "#b80000", font=customtkinter.CTkFont(size=12))
        label.pack(pady=20)

        # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞
        def close_new_window():
            new_window.destroy()

        # –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞
        #close_button = customtkinter.CTkButton(new_window, text="–ü–†–ò–°–û–ï–î–ï–ù–ò–¢–°–Ø –ö –ö–£–õ–¨–¢–£", command=close_new_window)
        #close_button.pack(pady=10)

        # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫
        def on_close_window():
            close_new_window()

        # –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ —Å–æ–±—ã—Ç–∏—é –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        new_window.protocol("WM_DELETE_WINDOW", on_close_window)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–∫–Ω–∞
        new_window.mainloop()

    def open_new_window_in_about_frame(self):
        # –æ—Ç–∫—Ä—ã—Ç—å –ø–∞—Å—Ö–∞–ª–∫—É –Ω–∞ Alt + 6 
        if self.current_frame == self.about_frame:
            self.open_new_window()
    
    #–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    def select_frame_by_name(self, name):
        self.home_button.configure(fg_color=("gray75", "gray25") if name == "home" else "transparent")
        self.settings_button.configure(fg_color=("gray75", "gray25") if name == "settings" else "transparent")
        self.cmd_button.configure(fg_color=("gray75", "gray25") if name == "cmd" else "transparent")
        self.about_button.configure(fg_color=("gray75", "gray25") if name == "about" else "transparent")

        self.current_frame = None
        if name == "home":
            self.home_frame.grid(row=0, column=1, sticky="nsew")
            self.current_frame = self.home_frame
        else:
            self.home_frame.grid_forget()
        if name == "settings":
            self.settings_frame.grid(row=0, column=1, sticky="nsew")
            self.current_frame = self.settings_frame
        else:
            self.settings_frame.grid_forget()
        if name == "cmd":
            self.cmd_frame.grid(row=0, column=1, sticky="nsew")
            self.current_frame = self.cmd_frame
        else:
            self.cmd_frame.grid_forget()
        if name == "about":
            self.about_frame.grid(row=0, column=1, sticky="nsew")
            self.current_frame = self.about_frame
        else:
            self.about_frame.grid_forget()

    def home_button_event(self):
        self.select_frame_by_name("home")

    def settings_button_event(self):
        self.select_frame_by_name("settings")

    def cmd_button_event(self):
        self.select_frame_by_name("cmd")

    def about_button_event(self):
        self.select_frame_by_name("about")

    def change_appearance_mode_event(self, new_appearance_mode):
        customtkinter.set_appearance_mode(new_appearance_mode)

    def change_scaling_event(self, new_scaling: str):
        new_scaling_float = int(new_scaling.replace("%", "")) / 100
        customtkinter.set_widget_scaling(new_scaling_float)

    #–º–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
        
    def update_progress_max(self, max_value):
        self.progress_max = max_value
        self.progress_bar['maximum'] = max_value

    def update_progress_label(self, status):
        try:
            status_value = int(status)
            self.progress_bar.set(status_value)
        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –æ—à–∏–±–∫—É –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é
            self.progress_bar.set(0)

    def update_progress(self, count, _=0):
        self.progress_bar['value'] = count
        self.progress_bar['maximum'] = self.progress_max

    def install_minecraft(self):
        threading.Thread(target=self._install_minecraft).start()
        self.update_progress_max(100)  # –ü—Ä–∏–º–µ—Ä: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        self.version_label.configure(text=f"–ò–¥–µ—Ç –∑–∞–ø—É—Å–∫ –≤–µ—Ä—Å–∏–∏ {self.version_optionmenu.get()}")  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        self.start_install_thread()

    def reset_progress_bar(self):  
        self.progress_bar['value'] = 0
        self.progress_bar['maximum'] = 0
        self.progress_bar.stop()
        self.installing = False  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏

    def _install_minecraft(self):
        self.installing = True  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        install_minecraft_version(versionid=self.version_id, minecraft_directory=minecraft_directory,
                                  callback={'setStatus': self.update_progress_label,
                                            'setProgress': self.update_progress,
                                            'setMax': self.update_progress_max})

        if self.username == '':
            self.username = generate_username()[0]

        options = {
            "username": self.username,
            "uuid": str(uuid1()),
            "token": ""
        }

        call(get_minecraft_command(version=self.version_id, minecraft_directory=minecraft_directory, options=options))
        self.reset_progress_bar()  # –¥–æ–±–∞–≤–ª–µ–Ω –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –∏ —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞


    def start_install_thread(self):
        if not self.installing:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –∏–¥–µ—Ç
            self.reset_progress_bar()  # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ –Ω–æ–ª—å
            self.progress_bar.start()
            self.install_thread_id = self.after(0, self.install_minecraft)
            self.installing = True  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏

    def stop_install_thread(self):
        if self.install_thread_id is not None:
            self.after_cancel(self.install_thread_id)
            self.install_thread_id = None
            self.installing = False  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç–∞–π–º–µ—Ä–∞
            self.reset_progress_bar()  # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ –Ω–æ–ª—å

    def launch_game(self):
        self.version_id = self.version_optionmenu.get()
        self.username = self.nick_entry.get()
        self.version_label.configure(text=f"–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–µ—Ä—Å–∏—è: {self.version_id}")  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        self.start_install_thread()
        
    def open_minecraft_folder(self):
        minecraft_directory = os.path.join(os.path.expanduser("~"), 'AppData', 'Roaming', '.minecraft')
        os.startfile(minecraft_directory)

    def get_all_versions(self):
        minecraft_versions = [version['id'] for version in get_version_list()]
        forge_versions = self.get_all_forge_versions()
        return minecraft_versions + forge_versions

    def get_all_forge_versions(self):
        all_forge_versions = []
        for minecraft_version in get_version_list():
            forge_versions = find_forge_version(minecraft_version['id'])
            if forge_versions:
                all_forge_versions.extend(forge_versions)
        return all_forge_versions if all_forge_versions else ["No Forge versions available"]
    
    def show_notification(self, message):
        title = "re:Craft"
        notification_thread = threading.Thread(target=self.toaster.show_toast, args=(title, message), kwargs={'duration': 10})
        notification_thread.start()

    def __del__(self):
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã
        sys.stdout = self.original_stdout

    class TextRedirector(io.TextIOBase):
        def __init__(self, widget, tag="stdout"):
            self.widget = widget
            self.tag = tag

        def write(self, str):
            self.widget.configure(state="normal")
            self.widget.insert("end", str, (self.tag,))
            self.widget.see("end")  # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –∫–æ–Ω—Ü–∞
            self.widget.configure(state="disabled")

    '''
    def update_greeting(self):
        current_time = datetime.datetime.now().time()

        if datetime.time(0, 0) <= current_time < datetime.time(3, 0):
            greeting = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
        elif datetime.time(4, 0) <= current_time < datetime.time(11, 0):
            greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
        elif datetime.time(12, 0) <= current_time < datetime.time(16, 0):
            greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
        elif datetime.time(17, 0) <= current_time < datetime.time(23, 0):
            greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
        else:
            greeting = "–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"

        self.home_frame_label.configure(text=greeting)'''
        
    def toggle_greeting(self):
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤ –ø–æ–ª–æ–∂–µ–Ω–∏–∏ "–≤—ã–∫–ª—é—á–µ–Ω–æ", —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if self.greeting_switch_var.get() == "off":
            self.home_frame_label.grid_remove()
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤ –ø–æ–ª–æ–∂–µ–Ω–∏–∏ "–≤–∫–ª—é—á–µ–Ω–æ", –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        else:
            self.home_frame_label.grid()

    def update_terminal(self, log_stream):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ, —á—Ç–æ –±—ã–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä
        logs = log_stream.getvalue()
        if logs:
            # –í—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
            self.output_text.insert("end", logs)
            self.output_text.see("end")
        # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
        log_stream.truncate(0)
        log_stream.seek(0)
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        self.after(100, self.update_terminal, log_stream)

    # –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    def update_randomgreeting(self):
        if self.random_greeting_switch.get() == 'on':
            greeting = random.choice(self.greetings)
        else:
            greeting = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ re:Craft!"
        self.home_frame_large_image_label.configure(text=greeting)

        # –ú–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–¥–∞
    def generate_random_code(self):
        return ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))

    # –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    def create_settings_file(self):
        random_code = self.generate_random_code()
        settings = {'random_code': random_code}
        with open(self.settings_file_path, 'w') as file:
            json.dump(settings, file, indent=4)

    # –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞
    def load_settings(self):
        with open(self.settings_file_path, 'r') as file:
            self.settings = json.load(file)

    def update_random_code_label(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–¥ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        random_code = self.settings.get('random_code', 'Unknown')
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–µ—Ç–∫—É —Å —Å–ª—É—á–∞–π–Ω—ã–º –∫–æ–¥–æ–º
        self.code.configure(text=f"ID: {random_code}")

if __name__ == "__main__":
    app = recraftMC()
    app.update_random_code_label()
    app.mainloop()